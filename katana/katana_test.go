package katana

import "testing"

func nodify( n int ) string {
  switch n {
  case NodeEmpty      : return "NodeEmpty"
  case NodeBlock      : return "NodeBlock"
  case NodeFigure     : return "NodeFigure"
  case NodeHeadline   : return "NodeHeadline"
  case NodeTable      : return "NodeTable"
  case NodeTableRow   : return "NodeTableRow"
  case NodeTableCell  : return "NodeTableCell"
  case NodeList       : return "NodeList"
  case NodeListElement: return "NodeListElement"
  case NodeAbout      : return "NodeAbout"
  case NodeText       : return "NodeText"
  case NodeSeparator  : return "NodeSeparator"
  case NodeComment    : return "NodeComment"
  }

  return "unknow"
}

func TestWhoIsThere( t *testing.T ){
  data := []struct{
    otype int
    input string
  } {
    { NodeEmpty, "" },
    { NodeEmpty, " " },
    { NodeEmpty, "\n" },
    { NodeEmpty, "\t\n" },
    { NodeEmpty, " \t\n" },
    { NodeEmpty, "    \t\n" },
    { NodeEmpty, "\r\v\t" },
    { NodeComment, "@" },
    { NodeComment, "@\t" },
    { NodeComment, "@\n" },
    { NodeComment, "@\t\n" },
    { NodeComment, "@ " },
    { NodeComment, "@ comment" },
    { NodeComment, " @" },
    { NodeComment, " @\t" },
    { NodeComment, " @\n" },
    { NodeComment, " @\t\n" },
    { NodeComment, " @ " },
    { NodeComment, " @ comment" },
    { NodeComment, "\t  @" },
    { NodeComment, "\t  @\t" },
    { NodeComment, "\t  @\n" },
    { NodeComment, "\t  @\t\n" },
    { NodeComment, "\t  @ " },
    { NodeComment, "\t  @ comment" },
    { NodeHeadline, "* " },
    { NodeHeadline, "* headline" },
    { NodeHeadline, "*** headline" },
    { NodeHeadline, "**** headline\n" },
    { NodeTable, "| |" },
    { NodeTable, " | | " },
    { NodeTable, " | | " },
    { NodeTable, " |=|=|=| " },
    { NodeTable, " \t|\t| col | cul |\n" },
    { NodeTable, " \t|--|--|--|\n" },
    { NodeList, "- ." },
    { NodeList, "- list" },
    { NodeList, "-\tlost" },
    { NodeList, "-   lost" },
    { NodeList, "-   lust." },
    { NodeList, "\t - ." },
    { NodeList, "\t - list" },
    { NodeList, "\t -\tlost" },
    { NodeList, "\t -   lost" },
    { NodeList, "\t -   lust." },
    { NodeList, "+ ." },
    { NodeList, "+ list" },
    { NodeList, "+\tlost" },
    { NodeList, "+   lost" },
    { NodeList, "+   lust." },
    { NodeList, "\t + ." },
    { NodeList, "\t + list" },
    { NodeList, "\t +\tlost" },
    { NodeList, "\t +   lost" },
    { NodeList, "\t +   lust." },
    { NodeList, "0. ." },
    { NodeList, "1. list" },
    { NodeList, "2.\tlost" },
    { NodeList, "3.   lost" },
    { NodeList, "4.   lust." },
    { NodeList, "\t 5. ." },
    { NodeList, "\t 6. list" },
    { NodeList, "\t 7.\tlost" },
    { NodeList, "\t 8.   lost" },
    { NodeList, "\t 9.   lust." },
    { NodeList, "0) ." },
    { NodeList, "1) list" },
    { NodeList, "2)\tlost" },
    { NodeList, "3)   lost" },
    { NodeList, "4)   lust." },
    { NodeList, "\t 5) ." },
    { NodeList, "\t 6) list" },
    { NodeList, "\t 7)\tlost" },
    { NodeList, "\t 8)   lost" },
    { NodeList, "\t 9)   lust." },
    { NodeList, "a) ." },
    { NodeList, "b) list" },
    { NodeList, "c)\tlost" },
    { NodeList, "d)   lost" },
    { NodeList, "e)   lust." },
    { NodeList, "\t f) ." },
    { NodeList, "\t g) list" },
    { NodeList, "\t h)\tlost" },
    { NodeList, "\t i)   lost" },
    { NodeList, "\t j)   lust." },
    { NodeList, "a. ." },
    { NodeList, "b. list" },
    { NodeList, "c.\tlost" },
    { NodeList, "d.   lost" },
    { NodeList, "e.   lust." },
    { NodeList, "\t f. ." },
    { NodeList, "\t g. list" },
    { NodeList, "\t h.\tlost" },
    { NodeList, "\t i.   lost" },
    { NodeList, "\t j.   lust." },
    { NodeList, "A) ." },
    { NodeList, "B) list" },
    { NodeList, "C)\tlost" },
    { NodeList, "D)   lost" },
    { NodeList, "E)   lust." },
    { NodeList, "\t F) ." },
    { NodeList, "\t G) list" },
    { NodeList, "\t H)\tlost" },
    { NodeList, "\t I)   lost" },
    { NodeList, "\t J)   lust." },
    { NodeList, "A. ." },
    { NodeList, "B. list" },
    { NodeList, "C.\tlost" },
    { NodeList, "D.   lost" },
    { NodeList, "E.   lust." },
    { NodeList, "\t F. ." },
    { NodeList, "\t G. list" },
    { NodeList, "\t H.\tlost" },
    { NodeList, "\t I.   lost" },
    { NodeList, "\t J.   lust." },
    { NodeList, "> ." },
    { NodeList, "> list" },
    { NodeList, ">\tlost" },
    { NodeList, ">   lost" },
    { NodeList, ">   lust." },
    { NodeList, "\t > ." },
    { NodeList, "\t > list" },
    { NodeList, "\t >\tlost" },
    { NodeList, "\t >   lost" },
    { NodeList, "\t >   lust." },
    { NodeAbout, ":: a" },
    { NodeAbout, "::\ta" },
    { NodeAbout, "::\t a" },
    { NodeAbout, "\t :: a" },
    { NodeAbout, "\t ::\ta" },
    { NodeAbout, "\t ::\t a" },
    { NodeBlock, ".. b>" },
    { NodeBlock, ".. ¥>" },
    { NodeBlock, "..comm >" },
    { NodeBlock, "..cØmm€ >" },
    { NodeBlock, "..cØmm€ param() >" },
    { NodeBlock, "..cØmm€\tparam( 2.5456 ) >" },
    { NodeBlock, "..cØmm€\tparam( \"hey\" ) >" },
    { NodeBlock, "\t \t ..\t  b>" },
    { NodeBlock, "\t \t ..\t  ¥>" },
    { NodeBlock, "\t \t ..\t comm >" },
    { NodeBlock, "\t \t ..\t cØmm€ >" },
    { NodeBlock, "\t \t ..\t cØmm€ param() >" },
    { NodeBlock, "\t \t ..\t cØmm€\tparam() >" },
    { NodeBlock, "\t \t ..\t cØmm€\tparam( 2.5456 ) >" },
    { NodeBlock, "\t \t ..\t cØmm€\tparam( \"hey\" ) >" },
    { NodeSeparator, "...." },
    { NodeSeparator, "....\n" },
    { NodeSeparator, "....\t\n" },
    { NodeSeparator, "\t ...." },
    { NodeSeparator, "\t \t \t....\n" },

    { NodeText, "=====TEXT=====" },
    { NodeText, " text" },
    { NodeText, "\ntext" },
    { NodeText, "\t\ntext" },
    { NodeText, " \t\ntext" },
    { NodeText, "    \t\ntext" },
    { NodeText, "\r\v\ttext" },
    { NodeText, "@text" },
    { NodeText, "@text\t" },
    { NodeText, "@\ntext" },
    { NodeText, "text @" },
    { NodeText, "text @\t" },
    { NodeText, "text @\n" },
    { NodeText, "text @\t\n" },
    { NodeText, "text @ " },
    { NodeText, "text @ comment" },
    { NodeText, " * " },
    { NodeText, " * headline" },
    { NodeText, " *** headline" },
    { NodeText, " **** headline\n" },
    { NodeText, "||" },
    { NodeText, " | |text" },
    { NodeText, " | | text" },
    { NodeText, " |=|=|=| \ntext" },
    { NodeText, " \t|\t| col | cul |\ntext" },
    { NodeText, " \t|--||--|\n" },
    { NodeText, "-\n" },
    { NodeText, "-." },
    { NodeText, "-text" },
    { NodeText, "t -" },
    { NodeText, "\t text + ." },
    { NodeText, "\t text + list" },
    { NodeText, "\t text +\tlost" },
    { NodeText, "\t text +   lost" },
    { NodeText, "\t text +   lust." },
    { NodeText, "0.\n" },
    { NodeText, "1.text" },
    { NodeText, "2.\nlost" },
    { NodeText, "0)\n" },
    { NodeText, "1)text" },
    { NodeText, "2)\nlost" },
    { NodeText, "a.\n" },
    { NodeText, "b.text" },
    { NodeText, "c.\nlost" },
    { NodeText, "a)\n" },
    { NodeText, "b)text" },
    { NodeText, "c)\nlost" },
    { NodeText, "0a. t" },
    { NodeText, "1b. text" },
    { NodeText, "2c. lost" },
    { NodeText, "0a) text" },
    { NodeText, "1b)text" },
    { NodeText, "2c) lost" },
    { NodeText, "a0. t" },
    { NodeText, "b1. text" },
    { NodeText, "c2. lost" },
    { NodeText, "a0) text" },
    { NodeText, "b1)text" },
    { NodeText, "c2) lost" },
    { NodeText, ">." },
    { NodeText, ">list" },
    { NodeText, ">\nlost" },
    { NodeText, "\n>   lost" },
    { NodeText, "<>   lust." },
    { NodeText, "::a" },
    { NodeText, "::\na" },
    { NodeText, ":: \na" },
    { NodeText, "\t a:: a" },
    { NodeText, "\t : :\ta" },
    { NodeText, "\t :0:\t a" },
    { NodeText, ". . b>" },
    { NodeText, "..\n ¥>" },
    { NodeText, "..comm \n>" },
    { NodeText, "t ..cØmm€ >" },
    { NodeText, ".c.Ømm€ param() >" },
    { NodeText, ".... hey" },
    { NodeText, "....\n hey" },
    { NodeText, "....\t\n hey" },
    { NodeText, "\thuy ...." },
  }

  for _, d := range data {
    out := whoIsThere( d.input )
    if out != d.otype {
      t.Errorf( "whoIsThere( %q ) == %s, expected %s", d.input, nodify( out ), nodify( d.otype ) )
    }
  }
}

func nodifyList( n int ) string {
  switch n {
  case NodeListMinus  : return "NodeListMinus"
  case NodeListPlus   : return "NodeListPlus"
  case NodeListNum    : return "NodeListNum"
  case NodeListAlpha  : return "NodeListAlpha"
  case NodeListPDef   : return "NodeListMDef"
  case NodeListMDef   : return "NodeListPDef"
  case NodeListDialog : return "NodeListDialog"
  case NodeListEmpty  : return "NodeListEmpty"
  }

  return "unknow"
}

func TestWhatListIsThere( t *testing.T ){
  data := []struct{
    otype int
    input string
  } {
    { NodeListMinus, "- ." },
    { NodeListMinus, "- list" },
    { NodeListMinus, "-\tlost" },
    { NodeListMinus, "-   lost" },
    { NodeListMinus, "-   lust." },
    { NodeListMinus, "\t - ." },
    { NodeListMinus, "\t - list" },
    { NodeListMinus, "\t -\tlost" },
    { NodeListMinus, "\t -   lost" },
    { NodeListMinus, "\t -   lust." },
    { NodeListPlus, "+ ." },
    { NodeListPlus, "+ list" },
    { NodeListPlus, "+\tlost" },
    { NodeListPlus, "+   lost" },
    { NodeListPlus, "+   lust." },
    { NodeListPlus, "\t + ." },
    { NodeListPlus, "\t + list" },
    { NodeListPlus, "\t +\tlost" },
    { NodeListPlus, "\t +   lost" },
    { NodeListPlus, "\t +   lust." },
    { NodeListMDef, "- . ::" },
    { NodeListMDef, "- list ::" },
    { NodeListMDef, "-\tlost ::" },
    { NodeListMDef, "-   lost ::" },
    { NodeListMDef, "-   lust. ::" },
    { NodeListMDef, "\t - . ::" },
    { NodeListMDef, "\t - list ::" },
    { NodeListMDef, "\t -\tlost ::" },
    { NodeListMDef, "\t -   lost ::" },
    { NodeListMDef, "\t -   lust. ::" },
    { NodeListPDef, "+ . ::" },
    { NodeListPDef, "+ list ::" },
    { NodeListPDef, "+\tlost ::" },
    { NodeListPDef, "+   lost ::" },
    { NodeListPDef, "+   lust. ::" },
    { NodeListPDef, "\t + . ::" },
    { NodeListPDef, "\t + list ::" },
    { NodeListPDef, "\t +\tlost ::" },
    { NodeListPDef, "\t +   lost ::" },
    { NodeListPDef, "\t +   lust. ::" },
    { NodeListNum, "0. ." },
    { NodeListNum, "1. list" },
    { NodeListNum, "2.\tlost" },
    { NodeListNum, "3.   lost" },
    { NodeListNum, "4.   lust." },
    { NodeListNum, "\t 5. ." },
    { NodeListNum, "\t 6. list" },
    { NodeListNum, "\t 7.\tlost" },
    { NodeListNum, "\t 8.   lost" },
    { NodeListNum, "\t 9.   lust." },
    { NodeListNum, "0) ." },
    { NodeListNum, "1) list" },
    { NodeListNum, "2)\tlost" },
    { NodeListNum, "3)   lost" },
    { NodeListNum, "4)   lust." },
    { NodeListNum, "\t 5) ." },
    { NodeListNum, "\t 6) list" },
    { NodeListNum, "\t 7)\tlost" },
    { NodeListNum, "\t 8)   lost" },
    { NodeListNum, "\t 9)   lust." },
    { NodeListAlpha, "a) ." },
    { NodeListAlpha, "b) list" },
    { NodeListAlpha, "c)\tlost" },
    { NodeListAlpha, "d)   lost" },
    { NodeListAlpha, "e)   lust." },
    { NodeListAlpha, "\t f) ." },
    { NodeListAlpha, "\t g) list" },
    { NodeListAlpha, "\t h)\tlost" },
    { NodeListAlpha, "\t i)   lost" },
    { NodeListAlpha, "\t j)   lust." },
    { NodeListAlpha, "a. ." },
    { NodeListAlpha, "b. list" },
    { NodeListAlpha, "c.\tlost" },
    { NodeListAlpha, "d.   lost" },
    { NodeListAlpha, "e.   lust." },
    { NodeListAlpha, "\t f. ." },
    { NodeListAlpha, "\t g. list" },
    { NodeListAlpha, "\t h.\tlost" },
    { NodeListAlpha, "\t i.   lost" },
    { NodeListAlpha, "\t j.   lust." },
    { NodeListAlpha, "A) ." },
    { NodeListAlpha, "B) list" },
    { NodeListAlpha, "C)\tlost" },
    { NodeListAlpha, "D)   lost" },
    { NodeListAlpha, "E)   lust." },
    { NodeListAlpha, "\t F) ." },
    { NodeListAlpha, "\t G) list" },
    { NodeListAlpha, "\t H)\tlost" },
    { NodeListAlpha, "\t I)   lost" },
    { NodeListAlpha, "\t J)   lust." },
    { NodeListAlpha, "A. ." },
    { NodeListAlpha, "B. list" },
    { NodeListAlpha, "C.\tlost" },
    { NodeListAlpha, "D.   lost" },
    { NodeListAlpha, "E.   lust." },
    { NodeListAlpha, "\t F. ." },
    { NodeListAlpha, "\t G. list" },
    { NodeListAlpha, "\t H.\tlost" },
    { NodeListAlpha, "\t I.   lost" },
    { NodeListAlpha, "\t J.   lust." },
    { NodeListDialog, "> ." },
    { NodeListDialog, "> list" },
    { NodeListDialog, ">\tlost" },
    { NodeListDialog, ">   lost" },
    { NodeListDialog, ">   lust." },
    { NodeListDialog, "\t > ." },
    { NodeListDialog, "\t > list" },
    { NodeListDialog, "\t >\tlost" },
    { NodeListDialog, "\t >   lost" },
    { NodeListDialog, "\t >   lust." },
  }

  for _, d := range data {
    out := whatListIsThere( d.input )
    if out != d.otype {
      t.Errorf( "whatListIsThere( %q ) == %s, expected %s", d.input, nodifyList( out ), nodifyList( d.otype ) )
    }
  }
}
