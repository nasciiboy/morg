#+TITLE: Morg (Manual org)
#+AUTHOR: nasciiboy
#+LANGUAGE: es
#+STARTUP: showall

Esto va de la creacion de un nuevo sistema de documentacion similar a
html o algun derivado de tex, pero eliminando el papel de la
equacion. Si compartes tu desagrado hacia html, groff, tex, y demas
quiza te interese. Si eres usuario de *emacs* y has probado *org-mode*
el siguente material fue una inspiracion que llevo a la redaccion de
este documento, preferiblemente lee el documento y si aun tienes
interes luego revisa los enlaces.

- libro en org (con exportacion a html)

  https://github.com/nasciiboy/pg2ncurses

- otro libro en org (con exportacion a html)

  https://github.com/nasciiboy/tcpl

- ejemplo de paginas man (un ejemplo de lo poco fiable de un lenguaje
  de marcas ligero)

  https://github.com/nasciiboy/NCURSES-Programming-HOWTO/tree/master/man

Los ficheros org han de visualizarse en emacs para apreciar todo su
espledor, aunque github los interpreta aceptablemente (sin imagenes)

…

Como toda creacion humana la informatica ha respondido a las
necesidades de los presentes deacuerdo a los conocimientos y
habilidades disponibles. Acaso al inicio alguien cosidero la necesidad
de codificar informacion mas alla del conjunto de caracteres
USAmericano, claro que no, los humanos no somos tan inteligentes, y
avansamos a base de apaños, resolviendo unas pocas dificultades de vez
en vez, lamentablemente solo mirando en retrospectiva esto se torna
evidente, y al hacerlo quedamos obligados a cuestionar nuestra
realidad.

En esta ocacion veamos en perspectiva hacia al pasado al mas
importante recurso de la humanidad "la informacion" y los medios a
nuestro alcance para crearla e interactuar con ella.

…

=seccion pendiente= llena de palabras con muchas letras, donde se
describe el trayecto de los sistemas para documentar infomation

…

Con lo anterior llegamos a la siguente conclucion tener libros en
papel esta chulo, aunque poco practico e ineficiente es, si se compara
con otos formatos de documentacion, por ello surgieron las paginas
man, los derivados de Tex, XML, la web y sobre ella la wikipedia. Sin
embargo seguimos forjando informacion pensando en imprimir sobre
papel, por ello todos los formatos que han surgido despues del
transistor son un dolor en el culo, y es momento de forjar un sistema
a la altura, apenas mas complicado que ascii, e igual de valido que
cualquier hijo vastardo de GML->SGML->XML->HTML

* Como debe ser un sistema de documentacion ideal

  - *Inmediato*

    Debe estar disponible en todo momento. Las paginas man, fueron un
    gran acierto de nuestros ancestros. El problema? =cat= o =less=
    con una base de datos de documentos en texto plano serian
    igualmente eficientes. No tendriamos colores, pero a cambio
    podriamos agregar nuevas paginas y/o secciones de forma mas
    elegante.

  - *Sencillo*

    Si la wikipedia existe no es por algun genio del marketing vende
    motos, o por un loco programador hasta arriba de flow, no, no, no,
    la razon es *roff*, *groff* o alguna de sus variantes, si has
    intentado crear una pagina man, o incluso has sido tan intrepido
    como para documentar tus cosas en man, habras decistido al poco
    tiempo, no hay nada mas feo he inteligible que una pagina de
    manual en groff. Por ello GNU lanzo info que sin duda es mas util
    que man, ademas TexInfo es menos feo que groff.

    Entoces por que no utilizamos info para escribir la wikipedia?

    - Hay que leer un manual (en ingles) de muchas paginas para
      utilizarlo como es debido

    - Esta lleno de marcas y cosas misticas (pensadas para imprimir
      libros)

    - Una ves finalizado el documento hay que "compilar" para exportar
      a otros formato mas manejables, es decir pasar del fuente
      =.texi= a info, html, pdf, ...

  - *Practico*

    El formato pdf se utiliza mucho, ha de ser bueno, si no por que
    habria tantos libros escaneados?

    Si no puedes realizar una busqueda de culquier palabra dentro del
    documento *nunca* puede ser bueno, si la forma de acceder al
    fuente para modificar algun error no esta a tu alcance *no* puede
    ser bueno, si has de recorrerlo por paginas es *malvado*

  - *Modificable* (por humanos)

    Si aspiras a ser un /heroe del teclado/ y por "curiosidad" se te
    ha ocurrido mirar el codigo html de cualquer pagina web, habras
    llegado a la conclucion que el mejor lugar para guardar un mensaje
    que nadie ha de ver jamas esta dentro de una etiqueta html anidada
    sobre cientos de etiquetas html en una linea unica sin ningun
    salto de linea. Un formato que acepta tales aberraciones deberia
    ser prohibido o almenos intervenido por un consejo de sabios para
    evitar tal desgracia.

  - *WYSIWYMAG*

    What You See Is What You Mean And Get (Lo que ves es lo que
    quieres decir y obtener)

    La estructura del documento ha de ser lo suficientemente agradable
    a la vista y proporcionar la suficiente utilidad como para poder
    utilizarse con poco o ningun tratarmiento adicional.

    animaciones neon, anuncios publicitarios, botones "sociales",
    typografias con sombras, colores que afectan la vista y el buen
    gusto, no son el proposito final del formato, de eso ya seguiran
    encargandose los formatos existentes


* Propuesa
** Reducir las etiquetas/marcas al minimo necesario

   html es tan feo que la wikipedia utiliza mediawiki como formato;
   github da soporte a markdown, org, texto plano...

   Por alguna razon desconocida los sistemas de marcado ligero son
   comodos, sin embargo si algun error se les ha de atribuir (que
   probablemente sea la razon de que existan tantos) es no valerse por
   si mismos, al mas minimo inconveniente se recurre a trozos de
   codigo html o latex. El formato que creemos ha de ser tan agradable
   a la vista que incluso no requiera ninguna herramienta para su uso,
   los mas intrepidos haran alarde de valerse solo con =less=, =more=
   o =cat=.

*** Estructura e indentacion

    un buen sistema de documentacion priorisa la estructura. Un
    documento estructurado necesita estos elementos

    - encabezados/secciones (headline)

      una marca un nivel.

      un titular inicia con el signo '*' seguido por (un) espacio(s) y
      el titular, el numero de '*' indica el nivel del titular, en html
      seria =h1=, =h2=, ...

      #+BEGIN_EXAMPLE
        * nivel Uno

          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
          eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
          enim ad minim veniam.

        ** nivel dos

           Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
           eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
           enim ad minim veniam.

        *** nivel tres

            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
            eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
            enim ad minim veniam.


          nivel uno superior, Lorem ipsum dolor sit amet, consectetur
          adipiscing elit, sed eiusmod tempor incidunt ut labore et
          dolore magna aliqua. Ut enim ad minim veniam.
      #+END_EXAMPLE

      El contenido de cada encabezado inicia dejando una linea de
      espacio en blanco y ha de indentarse con un numero de espacios
      igual al numero de '*', mas un espacio. La identacion permite
      regresar a un nivel superior, es decir pasar del encabezado dos
      al uno disminuyendo la indentacion en uno.

      Para mantener una estetica agradable los titulares extensos
      pueden colocarse de la forma

     #+BEGIN_EXAMPLE
       * encabezado muy muy muy muy muy muy muy
         muy muy muy extenso
     #+END_EXAMPLE

     Algunos textos agregan un subtitulo en lugar de crear una
     subseccion para esto pobria ofreserse algo como:

     #+BEGIN_EXAMPLE
       * encabezado
         @ subencabezado
     #+END_EXAMPLE

     donde un una '@' al mismo nivel de indentacion del inicio del
     nombre del encabezado seguido por un espacio en blanco establece
     un subencabezado

*** Listas

    #+BEGIN_EXAMPLE
      - lista desordenada
      + lista desordenada
      1. lista ordenada numericamente
      1) lista ordenada numericamente
      a. lista ordenada alfabeticamente
      a) lista ordenada alfabeticamente
    #+END_EXAMPLE

    El contenido de una lista (como todo lo demas) debe indentarse
    segun la seccion de la que forme parte (con respecto a la seccion
    y asi misma)

    #+BEGIN_EXAMPLE
      * nivel uno

        1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
           eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
           enim ad minim veniam.

           a) Lorem ipsum dolor sit amet.

              - Lorem ipsum dolor sit amet, consectetur adipiscing elit.

        2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
           eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut
           enim ad minim veniam.
    #+END_EXAMPLE

**** y si tengo una novela

     #+BEGIN_EXAMPLE
       > "Dialogo, Lorem ipsum dolor sit amet, consectetur adipiscing
         elit, sed eiusmod tempor incidunt ut labore et dolore magna
         aliqua. Ut enim ad minim veniam."
     #+END_EXAMPLE

     los dialogos tienen la mismas normas que una lista.

*** definiciones

    #+BEGIN_EXAMPLE
      :: definicion :: Lorem ipsum dolor sit amet, consectetur
         adipiscing elit, sed eiusmod tempor incidunt ut labore et
         dolore magna aliqua. Ut enim ad minim veniam.

      :: definicion <: Lorem ipsum dolor sit amet, consectetur
         adipiscing elit, sed eiusmod tempor incidunt ut labore et
         dolore magna aliqua.

      :: definicion :> Lorem ipsum dolor sit amet, consectetur
         adipiscing elit, sed eiusmod tempor incidunt ut
         labore et dolore magna aliqua.
    #+END_EXAMPLE

    inician con ::, seguido del elemento de la definicion, a
    continuacion se coloca un "indicador" de alineacion/formato como
    "::" (justificado) "<:" (a la izquierda), ":>" (a la derecha) o
    ">:<" (centrado).

    pueden concatenerse varias definiciones de la forma

    #+BEGIN_EXAMPLE
      :: A ::
      :: B ::
      :: C :: exadecimal
    #+END_EXAMPLE

    o

    #+BEGIN_EXAMPLE
      :: A :: B :: C :: exadecimal
    #+END_EXAMPLE

*** resaltar texto

    nadie quiere tener etiquetas a lo html

    #+BEGIN_EXAMPLE
      <etiqueta>
        <etiqueta>
          contenido
        </fin_etiqueta>
      </fin_etiqueta>
    #+END_EXAMPLE

    los lenguajes de marcas ligeras lo manejan de forma mas elegante

    #+BEGIN_EXAMPLE
      (org)       *bold*
      (markdown)  **bold**
      (mediawiki) '''bold'''

      algun otro  <^bold^>
    #+END_EXAMPLE

    sin embargo con esta aproximacion pronto se crean ambiguedades,
    ademas de estar liminado a 3 o 4 formas de etiquetar el contenido
    (antes de recurrir a marcas exoticas o recaer en etiquetas html).

    A espera de una mejor alternativa, podria recurrirse al estilo de
    marcas de texinfo… claro despues de un leve retoque al formato.

    #+BEGIN_EXAMPLE
      @x{}
      @x()
      @x[]
      @x<>
    #+END_EXAMPLE

    donde '@' indica "a continuacion contenido /especial/", 'x' es un
    caracter ascii imprimible, que describe el comando o accion a
    aplicar al contenido dentro de delimitado por {…}, (…), <…> o […]

    *por que una '@'?* fuera de algun lenguaje mistico o el correo
    podria ser el signo menos utilizado y mas aun con la estructura
    "@x{}"

    *y la 'x'?* si hemos de necesitar mas marcas que los caracteres
    ascii imprimibles algo no estamos haciendo bien, algunas
    propuestas:

    - b :: negrita
    - e :: enfasis.
    - u :: subrayado
    - v :: verbatim
    - s :: tachado
    - c :: codigo
    - C :: smalCaps
    - $ :: comando
    - a :: abreviatura <- alguien a usado esto?
    - # :: direccion
    - ' :: samp
    - : :: definicion
    - k :: tecla/combinacion de teclas
    - f :: fichero
    - q :: cita
    - z :: zero, sin marcas "tal cual"
    - ^ :: superindice
    - _ :: subindice

    que cada caracter solo tenga un significado permite concatenar
    acciones como en

    #+BEGIN_EXAMPLE
      @uisb(underlineItalicStrikeBold)
    #+END_EXAMPLE

    en html seria

    #+BEGIN_EXAMPLE
      <u><i><strike><b>underlineItalicStrikeBold</b></strike></i></u>
    #+END_EXAMPLE

    *({[<>]}) ... ?* mas opciones, mas diversion. Segun el contexto de
    del contenido "{}" o "()" podria requerir el *escape* de algun
    caracter, asi que segun el contexto y para minimizar la inclucion
    de signo extraños, los delimitadores se aplican deacuerdo a la
    necesidad y gusto del autor.

    cuando no haya /escapatoria/, podrio anularse el significado
    especial precediendo con '@' como en

    #+BEGIN_EXAMPLE
      @b(1@). punto uno)
    #+END_EXAMPLE

    que substituye =@)= por solo ')' al expandir la etiqueta

*** y otras cosas mas complicadas
**** comentar lineas

     #+BEGIN_EXAMPLE
       @ linea comentada
     #+END_EXAMPLE

     una '@' al inicio de linea seguida pon uno o mas espacios
     comenta la linea en cuestion

**** mas alla del ASCII

     preferiblemente se utilizara un sistema de codificacion "moderno"
     como UTF-8 o CESU-8, para evitar temas complicados como los
     acentos, dieresis y otros signos "exoticos".

     Opcionalmente para no vernos en la necesidad de buscar un
     caracter complicado, seguido de un corta y pega, se aplicaria el
     comando '&'

     #+BEGIN_EXAMPLE
       @&{nombreGenericoDeCaracterComplicado}
       @&{leftarrow}
     #+END_EXAMPLE

**** math

     en caso de formulas matematicas y ya que desconosco bastante en
     este tema, podriamos no reinventar la rueda y tomar las formulas
     Tex

     #+BEGIN_EXAMPLE
       @m{\formula\Matematica\Tex}
     #+END_EXAMPLE

**** valores-variables

     #+BEGIN_EXAMPLE
       @v{variable definida en alguna parte}
     #+END_EXAMPLE

     algo asi como un =#define= de preprocesador de c

**** enlaces

     #+BEGIN_EXAMPLE
       @l{ruta}
     #+END_EXAMPLE

     equivalente a

     #+BEGIN_EXAMPLE
       <a href="ruta">ruta</a>
     #+END_EXAMPLE

     y

     #+BEGIN_EXAMPLE
       @l{ruta,descripcion}
     #+END_EXAMPLE

     equivalente a

     #+BEGIN_EXAMPLE
       <a href="ruta">descripcion</a>
     #+END_EXAMPLE

     Para /insertar/ un contenido dentro del documento (no como un
     enlace) se hara uso de la etiqueta 'd' (data), sintaxis identica
     a 'l'

     #+BEGIN_EXAMPLE
       @d{path}
       @d{path,descripcion}
     #+END_EXAMPLE

     podrian utilizarse /ambitos/ en casos especificos como imagenes,
     y videos

     #+BEGIN_EXAMPLE
       @d{img:path}
     #+END_EXAMPLE

     optenemos

     #+BEGIN_EXAMPLE
       <img src="path" />
     #+END_EXAMPLE

     y con

     #+BEGIN_EXAMPLE
       @d{img:path,descripcion}
     #+END_EXAMPLE

     optenemos

     #+BEGIN_EXAMPLE
       <img src="path">descripcion</img>
     #+END_EXAMPLE

     los enlaces internos se colocarian de forma

     #+BEGIN_EXAMPLE
       @t{target}
       @t{target,descripcion}
       @T{radioTarget}
       @T{radioTarget,descripcion}
     #+END_EXAMPLE

     un /radio target/ convierte en enlace a este punto a culquier
     aparicion que coincida con =target= (insensible a minusculas o
     mayusculas) detro del documento, exptuado bloques de codigo.

**** y el contenido mulmedia

     #+BEGIN_EXAMPLE
       ^^ elemento :: descripcion
       >> elemento :: descripcion
       << elemento :: descripcion
       __ @d{elemento,descripcion} :: descripcion
     #+END_EXAMPLE

     La posicion del elemento se establece de la combinacion de dos
     caracteres =<>^_= el primer caracter estableces la posicion del
     elemento =^= superior, =_= inferior, derecha =>= o izquierda =<=,
     el segundo caracter una ubicacion, especifica.

     La alineacion de la descripcion se establece al igual que en las
     definiciones "::" (justificado) "<:" (a la izquierda), ":>" (a la
     derecha) o ">:<" (centrado).

     #+BEGIN_EXAMPLE
       << elemento :: descripcion

          genera

       |------------------+-----------------------|
       |                  | descripcion           |
       |                  |                       |
       |     elemento     |                       |
       |                  |                       |
       |                  |                       |
       |------------------+-----------------------|
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
       <^elemento >:< descripcion

          genera

       |------------------+-----------------------|
       |    elemento      |      descripcion      |
       |                  |                       |
       |                  |                       |
       |                  |                       |
       |                  |                       |
       |------------------+-----------------------|
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
       ^> elemento >:< descripcion

          genera

       |-----------------------------------------|
       |                                         |
       |                                         |
       |                           elemento      |
       |                                         |
       |                                         |
       |-----------------------------------------|
       |              descripcion                |
       |                                         |
       |                                         |
       |                                         |
       |                                         |
       |-----------------------------------------|
     #+END_EXAMPLE

**** notas

     #+BEGIN_EXAMPLE
       @n{target}
       @n{target,descripcion}
       @n{nota en linea, descripcion}
     #+END_EXAMPLE

     los =target's= podrian colocarse al final del documento en una
     seccion especial al estilo org, o al final de la seccion actual

**** bloques de cosas

     con un esquema similar a texinfo

     #+BEGIN_EXAMPLE
       @block
         Lorem ipsum dolor sit amet, consectetur
         adipiscing elit, sed eiusmod tempor incidunt ut
         labore et dolore magna aliqua.
       @end block
     #+END_EXAMPLE

     el contenido se indenta con dos espacios par evitar ambiguedades,
     por ejemplo al documentar el propio formato

     #+BEGIN_EXAMPLE
       @example
         un bloque de ejemplo

         @example
         @end example
       @end example
     #+END_EXAMPLE

     la indentacion anula la interpretacion del bloque interno y evita
     que el bloque finalice con el primer =@end example=, sin embargo
     eso no significa que en algunos bloques, un bloque interno no
     pueda ser interpretado

     los bloques propuestos

     #+BEGIN_EXAMPLE
       right
       left
       justify
       center
       quote
       src
       blood
       example
       multicols
       pre
       math
       custom
     #+END_EXAMPLE

     adicionamente puede configurarse cada bloque mediante banderas y
     palabras clave, por ejemplo un un bloque =src=

     #+BEGIN_EXAMPLE
       @src lenguaje -n 0 -i l
       @end src
     #+END_EXAMPLE

     =lenguaje= indica el lenguaje de programacion, =-n= para numerar
     las lineas a partir de =0=, =-i= para /interpretar/ los enlaces
     =@l{}= que contenga el bloque.

**** Dudas de diseño

     De optar por la sintaxis "@x()", la "contatenacion" de elementos
     actura del mas siginificativo (cercano a '()')  al menos
     siginificativo (cercana a '@') o viseversa?

     por ejemplo

     #+BEGIN_EXAMPLE
       @bie(palabra)
     #+END_EXAMPLE

     es igual equivalente a

     #+BEGIN_EXAMPLE
       <b><i><e>palabra</e></i></b>
     #+END_EXAMPLE

     o

     #+BEGIN_EXAMPLE
       <e><i><b>palabra</b></i></e>
     #+END_EXAMPLE

     probablemente lo mas razonable sea evaluar deacuerdo a los
     "comandos" y no a su orden de aparicion.

     un tema preocupante sera si al "procesar" el archivo y mostrarlo
     sea necesario crear un fichero separado para los estilos o dejar
     esto de lado y solo centrarse en la estructura.

*** Configuracion del documento

    El formato de marcas de configuracion org se ve bien!

    #+BEGIN_EXAMPLE
      #+TITLE    :
      #+SUBTITLE :
      #+MAILTO   :
      #+OVERVIEW :
      #+EXPORT   :
      #+SWITCHOFF:
      #+MARKUP   :
      #+CSS      :
    #+END_EXAMPLE

    pero para mantener coherente el formato pordria optarse por

    #+BEGIN_EXAMPLE
      @title
      @subtitle
      @mailto
      @everview
      @export
      @switchoff
      @markup
      @css
    #+END_EXAMPLE

** Tablas

   Sin duda un tema complejo, podria tenerse una tabla totalmente
   funcional con formulas y demas, completamente en texto, pero para
   inciar:

   #+BEGIN_EXAMPLE
     | encabezado    | otro e  |
     |===============|=========|
     | elemento uno  | algo x  |
     |---------------|---------|
     | elemento dos  | algo a  |
     |               |---------|
     |               | algo b  |
     |---------------|---------|
     | d o s  c e l d a s      |
   #+END_EXAMPLE

   el encabezado se coloca a la cima, delimitado con "|===|==|"

   cada elemento se divide con "|----|---|"

   unir celdas es complicado podria tomarse en consideracion el numero
   exacto de caracteres para obtener esta informacion, o colocar un
   signo "invisible" de alineacion dentro la la tabla como '^'

   para escapar '|' dentro de la tabla "@z{|}" o "@|", el que mas
   coherencia con lo demas tenga

* y que mas

  Luego de crear un borrador con todas las caracteristicas del formato
  se codificara un exportador a html con el fin de mostrar al mundo
  sus maravillas. Seguido de un reemplazo para los comandos
  =man/info=, donde leer nuestras cosas, por fantasear un poco podria
  volcarse la wikipedia a este formato y acceder a ella desde este
  fantastico programa aun no escrito. y para finalizar generar
  repositiorios con todo el conocimiento pasado y futuro sin importar
  copyrights y territorios (el ascii/utf8/conocimiento no tiene drm).

  Como aficionado a la programacion, mi mas grande deseo es que todo
  esto este programado en c (desde luego sera software libre), pero no
  podemos conformarnos con el hecho de que el programa funcione, la
  escritura y estructura del codigo han de ser poesia, elegancia, y
  sobre todo un monumento al buen diseño. Cada componente usado ha de
  estar precente dentro de una unica carpeta (o no) pero sobre todo
  podra ser utilizado como material de aprendizage para las mentes
  curiosas.

  Estaria encantado de codificar esto, sin embargo el K&R y algo de
  Deitel, sumado a un nulo conocimiento de matematicas en conjunto con
  una formacion academica de tercer mundo que no paso de los 15, me es
  insuficiento para tal lavor. En este repositorio encontrara el
  codigo de (mi orgullo) una [[https://github.com/nasciiboy/RecursiveRegexpRaptor][libreria de expreciones regulares]], y un
  poco afortunado intento de exportador a html. en fin por el momento
  la labor me rebasa y lo dejare en manos mas aptas, o esperare a
  alcanzar el conocimiento requerido para hacerlo yo mismo con casinos
  y colegialas japonesas.

  Por el momento es todo. Esta es solo una propuesta y cualquer
  aspecto es mejorable.

* Todo

  - definir el formato
  - crear exportador inicial a html
  - crear un modo en emacs donde editar este formato, para los no
    iluminados por el *editor* unico y verdadero algun apañø
  - crear visualizador para substituir man/info
  - dominar el mundo

  [[mailto:nasciiboy@gmail.com]]
